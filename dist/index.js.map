{"version":3,"sources":["../src/index.ts"],"sourcesContent":["const MONOCLE_SCRIPT_URL = 'https://mcl.spur.us/d/mcl.js'\n\ntype MonocleEvents = 'monocle-success' | 'monocle-error' | 'monocle-onload'\n\nexport interface MonocleOptions {\n  token: string // Authentication token for Monocle API\n}\n\n/**\n * Monocle integration loader and manager.\n * Dynamically injects the Monocle script and provides methods to interact with it.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport default class Monocle {\n  private token: string\n  private _script: HTMLScriptElement | null = null // <script> element reference\n  private _monocle: any = null // Global MCL object once loaded\n  private _eventTarget: EventTarget | null = null // EventTarget for custom events\n  private _ready: Promise<void> | false = false // Promise resolving when script is ready\n  private _handlers = new Map<string, EventListener>() // Stored event handlers for off()\n\n  /**\n   * @param options Configuration options, requiring a valid token\n   * @throws Error if no token is provided\n   */\n  constructor(options: MonocleOptions) {\n    if (!options.token) {\n      throw new Error('[Monocle] No token provided')\n    }\n    this.token = options.token\n  }\n\n  /**\n   * Dispatches a custom Monocle event on the internal EventTarget.\n   */\n  private _dispatch(event: MonocleEvents, detail?: any) {\n    this._eventTarget?.dispatchEvent(new CustomEvent(event, { detail }))\n  }\n\n  /**\n   * Load the Monocle script into the document.\n   * Returns a promise that resolves when the script is loaded or rejects on failure.\n   */\n  public init(): Promise<void> {\n    // No-op on server-side\n    if (typeof window === 'undefined') return Promise.resolve()\n    // Return existing promise if already initializing/loaded\n    if (this._ready) return this._ready as Promise<void>\n\n    this._eventTarget = new EventTarget()\n    const script = document.createElement('script')\n    this._script = script\n    script.id = '_mcl'\n    script.async = true\n    script.defer = true\n    script.src = `${MONOCLE_SCRIPT_URL}?tk=${encodeURIComponent(this.token)}`\n\n    // Setup global callbacks to forward events\n    ;(window as any).monocleSuccessCallback = (data: any) => this._dispatch('monocle-success', data)\n    ;(window as any).monocleErrorCallback = (err: any) => this._dispatch('monocle-error', err)\n    ;(window as any).monocleOnloadCallback = () => this._dispatch('monocle-onload', undefined)\n\n    // Create a promise that resolves on load or rejects on error\n    this._ready = new Promise((resolve, reject) => {\n      script.addEventListener('load', () => {\n        // Store the global MCL object reference\n        this._monocle = (window as any).MCL\n        resolve()\n      })\n      script.addEventListener('error', () => {\n        // Cleanup on failure\n        try {\n          document.head.removeChild(script)\n        } catch {\n          // ignore if not present\n        }\n        this._ready = false\n        reject(new Error('[Monocle] Failed to load script'))\n      })\n      document.head.appendChild(script)\n    })\n\n    return this._ready as Promise<void>\n  }\n\n  /**\n   * Refresh and retrieve the latest Monocle bundle data.\n   * @returns The data bundle from Monocle\n   * @throws Error if refresh or data retrieval fails\n   */\n  public async getBundle(): Promise<any> {\n    if (typeof window === 'undefined') return Promise.resolve()\n    await this.init()\n\n    // Use stored instance or fallback to global\n    const mclInstance = this._monocle || (window as any).MCL\n    try {\n      await mclInstance.refresh()\n      const bundle = mclInstance.getBundle()\n      if (!bundle) {\n        throw new Error('[Monocle] No data returned')\n      }\n      this._dispatch('monocle-success', bundle)\n      return bundle\n    } catch (err: any) {\n      this._dispatch('monocle-error', err)\n      throw err\n    }\n  }\n\n  /**\n   * Register an event listener for Monocle events.\n   */\n  public on(event: MonocleEvents, handler: (detail: any) => void): void {\n    if (typeof window === 'undefined') return\n\n    // Ensure an EventTarget exists and script is initialized\n    if (!this._eventTarget) {\n      this._eventTarget = new EventTarget()\n      this.init().catch(() => {})\n    }\n\n    // Wrap handler to extract detail from CustomEvent\n    const wrapper: EventListener = (e: Event) => handler((e as CustomEvent).detail)\n    const key = `${event}:${handler}`\n    this._handlers.set(key, wrapper)\n    this._eventTarget.addEventListener(event, wrapper)\n  }\n\n  /**\n   * Unregister a previously added event listener.\n   */\n  public off(event: MonocleEvents, handler: (detail: any) => void): void {\n    if (typeof window === 'undefined') return\n\n    const key = `${event}:${handler}`\n    const wrapper = this._handlers.get(key)\n    if (wrapper) {\n      this._eventTarget?.removeEventListener(event, wrapper)\n      this._handlers.delete(key)\n    }\n  }\n\n  /**\n   * Clean up the Monocle script and all associated resources.\n   */\n  public destroy(): void {\n    if (typeof window === 'undefined' || !this._ready) return\n\n    // Remove the specific script instance\n    this._script?.parentNode?.removeChild(this._script)\n    // Remove any residual Monocle scripts by URL\n    document.head.querySelectorAll('script').forEach((s) => {\n      if (s.src.includes('mcl.spur.us')) s.remove()\n    })\n\n    // Remove global callbacks and MCL reference\n    delete (window as any).monocleSuccessCallback\n    delete (window as any).monocleErrorCallback\n    delete (window as any).monocleOnloadCallback\n    delete (window as any).MCL\n\n    // Reset internal state\n    this._eventTarget = null\n    this._monocle = null\n    this._script = null\n    this._ready = false\n    this._handlers.clear()\n  }\n}\n"],"mappings":"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","names":[]}